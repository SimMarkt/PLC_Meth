(********************************************************************
 * Program: Gas_Control
 * Author: Markthaler
 * Created: 30.03.2022
 * Info: Control of the MFCs for regulating the feed gas flow and its composition 
		(In ramp mode, an excess of H2 is set to avoid catalyst deactivation) 
		(Input for feed gas: biogas flow rate (l_N/min) or load profile, CO2 content in biogas, H2/CO2 ratio, H2O content, ramp)
		(For field test, a target load profile "g_r_last_ramp_extern" can be specified in autonomous operation, but it is only accepted after a certain time after active load change.)
		(Calculation of gas compositions and mass flows assuming an ideal gas)
		(MFC setpoints are in l_N/min [Norm liter per minute])
 * l_i=1	MFC1	Hydrogen, Bürkert GmbH & Co. KG, Type 8741, Flow (0–115 l_N/min), 4-20 mA
 * l_i=2	MFC2	Biogas, Wagner Mess- und Regeltechnik GmbH, Flow ((0)–1.4–70 l_N/min), 4-20 mA
 * l_i_r=0	Species	H2
 * l_i_r=1	Species	CO2
 * l_i_r=2	Species	CH4
 * l_i_r=3	Species	H2O
 * Note on conversion to 4-20mA signals:
			* Resolution of the measurement with 16-bit channel width from the X20 module = 2^16 = [-32767,...,+32767] values
			* [0,...,+32767] values correspond to 0-20mA signal = L_R_ANALOG_SIGNAL
			* Sensors with 4-20mA signal -> Subtract the value range <4mA over 32767*4/20 = 6553.6 from the value range
			* Multiplication with measurement range Max-Min
 ********************************************************************)

PROGRAM _INIT
	//Initialization of the ramp parameters for field test operation
	l_i:=0;		//Manual operation
	l_r_ramp_var[l_i,0] := g_r_last_ramp_slewrate / 60;		//Set in visualization
	l_r_ramp_var[l_i,1] := g_r_last_ramp_slewrate / 60;		//Set in visualization
	l_r_ramp_var[l_i,2] := 0.0;
	l_r_ramp_var[l_i,3] := 100.0;
	l_i:=1;		//Automatic operation
	l_r_ramp_var[l_i,0] := l_r_last_ramp_slewrate_pos / 60;		
	l_r_ramp_var[l_i,1] := l_r_last_ramp_slewrate_neg / 60;		
	l_r_ramp_var[l_i,2] := 23.2;		// In automatic operation, partial load
	l_r_ramp_var[l_i,3] := 100.0;		// In automatic operation, full load

	LOOP l_i = 0 TO 1 DO
		FB_Limiter[l_i].MaxPosSlewRate := l_r_ramp_var[l_i,0]; 	
		FB_Limiter[l_i].MaxNegSlewRate := l_r_ramp_var[l_i,1];
		FB_Limiter[l_i].MinOut := l_r_ramp_var[l_i,2];
		FB_Limiter[l_i].MaxOut := l_r_ramp_var[l_i,3];
		FB_Limiter[l_i].Enable := FALSE;
	ENDLOOP
	
	//Initialization of a time delay for H2 excess in ramp mode
	LOOP l_i = 1 TO 2 DO
		FB_TimeDelay[l_i].Enable := FALSE;
		FB_TimeDelay[l_i].InitialValue := 0;
		FB_TimeDelay[l_i].DelayTime := 0;
	ENDLOOP
	
	//Initialization of the time delay when closing the valves
	LOOP l_i = 3 TO 4 DO		//Close gas supply valves
		FB_TimeDelay[l_i].Enable := TRUE;
		FB_TimeDelay[l_i].DelayTime := 0.8;
		FB_TimeDelay[l_i].InitialValue := 1;
	ENDLOOP
	
	//Initial status: OFF 
	g_i_status_GR := 0;
END_PROGRAM

PROGRAM _CYCLIC
	CASE g_i_status_GR OF
		ACTION 0:		//Gas control OFF	
			l_i_status_GR := 0;
			g_volf_in_bio.l_min := 0;		//Biogas flow rate to zero
			g_volf_in_bio.m3_h := g_volf_in_bio.l_min * 60 / 1000;
			g_r_nf_in_react[0] := 0;
			g_volf_in_react[0].m3_s := 0;
			g_volf_in_react[1].m3_s := 0;
			g_volf_in_react[2].m3_s := 0;
			g_volf_in.m3_s := 0;
			g_b_MV[1] := FALSE;		//Solenoid valves closed
			g_b_MV[3] := FALSE;
			LOOP l_i = 1 TO 2 DO		//Output signal to MFCs to zero
				g_mfc_MFC[l_i].r_soll := 0;
				g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP	
		ENDACTION

		ACTION 1:		//Gas control ON - Laboratory: Gas control loop with gas supply of H2, CO2, and CH4 mixture
			l_i_status_GR := 1;
			g_b_MV[1] := FALSE;
			g_b_MV[2] := FALSE;
			g_b_MV[3] := TRUE;
			//Values for biogas flow rate, CO2 biogas content, H2/CO2 ratio must match the gas control loop,
			//so that steam dosing is executed correctly!
			//Calculation of feed gas quantities based on manual input (visualization)
			g_r_y_in_react_percent[3] := 0;		//Can be commented out in case of feed gas steam addition
			g_r_y_in_react[3] := g_r_y_in_react_percent[3] / 100;		//Conversion of the percentage values specified in the visualization to mole fraction
			g_r_y_in_bio_react[0] := g_r_y_in_bio_react_percent[0] / 100;
			g_r_y_in_bio_react[1] := 1 - g_r_y_in_bio_react[0];		//CH4 content in biogas
			g_volf_in_bio.m3_s := g_volf_in_bio.l_min / G_R_VOFL_U;	
			g_r_nf_in_bio := G_R_P0 * 100000 * g_volf_in_bio.m3_s / (G_R_R_UNI * G_R_T0);		//Biogas molar flow rate
			g_r_nf_in_react[1] := g_r_y_in_bio_react[0] * g_r_nf_in_bio;		//Species molar flow rate
			g_r_nf_in_react[2] := g_r_y_in_bio_react[1] * g_r_nf_in_bio;					
			g_r_nf_in_react[0] := g_r_sigma_H2_CO2 * g_r_nf_in_react[1];
			g_r_nf_in_react[3] := g_r_y_in_react[3] * (g_r_nf_in_react[0] + g_r_nf_in_react[1] + g_r_nf_in_react[2]) / (1 - g_r_y_in_react[3]);
			g_r_nf_in :=  g_r_nf_in_react[0] + g_r_nf_in_react[1] + g_r_nf_in_react[2] + g_r_nf_in_react[3];
			g_volf_in.m3_s := g_r_nf_in * G_R_R_UNI * G_R_T0 / (G_R_P0 * 100000);		//Total standard volume flow
			g_volf_in.l_min := g_volf_in.m3_s * G_R_VOFL_U;
			LOOP l_i_r = 0 TO 2 DO		//Mole fraction and percentage
				g_r_y_in_react[l_i_r] := g_r_nf_in_react[l_i_r] / g_r_nf_in;
				g_r_y_in_react_percent[l_i_r] := g_r_y_in_react[l_i_r] * 100;
			ENDLOOP
			LOOP l_i_r = 0 TO 3 DO		//Species standard volume flows
				g_volf_in_react[l_i_r].m3_s := g_r_y_in_react[l_i_r] * g_volf_in.m3_s;
				g_volf_in_react[l_i_r].l_min := g_volf_in_react[l_i_r].m3_s * G_R_VOFL_U;
			ENDLOOP
		ENDACTION
		
		ACTION 2:		//Gas control ON - Field test
			l_i_status_GR := 2;
			g_b_MV[1] := TRUE;
			g_b_MV[2] := FALSE;
			g_b_MV[3] := TRUE;
			
			//Manual adjustment of the biogas flow rate via ramp (visualization)
			IF EDGEPOS(g_b_ramp_active[0]) THEN
				//Adjustment of ramp parameters
				FB_Limiter[0].OutPresetValue := g_r_last;		//Start at current flow rate value
				FB_Limiter[0].SetOut := TRUE;
				FB_Limiter[0].MaxNegSlewRate := g_r_last_ramp_slewrate / 60;
				FB_Limiter[0].MaxPosSlewRate := g_r_last_ramp_slewrate / 60;
				FB_Limiter[0].Update := TRUE;
			ELSE
				IF EDGEPOS(FB_Limiter[0].UpdateDone) THEN
					FB_Limiter[0].Update := FALSE;
				ENDIF
			ENDIF
						
			//Start ramp
			IF g_b_auto = FALSE THEN		//Manual operation
				IF g_b_ramp_active[0] = TRUE THEN		//Execute ramp
					FB_Limiter[0].Enable := TRUE;
					FB_Limiter[0].In := g_r_last_ramp;
					FB_Limiter[0] FUB MTBasicsLimiter();
					g_r_last := FB_Limiter[0].Out;
				ELSE
					FB_Limiter[0].Enable := FALSE;
				ENDIF
			ELSE		//Automatic operation with external assignment of the load value
				IF g_i_status_PL = 4 THEN
					FB_Limiter[1].Enable := TRUE;
					FB_Limiter[1].OutPresetValue := g_r_last;		//Start at current flow rate value
					FB_Limiter[1].SetOut := TRUE;
					FB_Limiter[1].In := g_r_last_ramp_extern;
					FB_Limiter[1] FUB MTBasicsLimiter();
					g_r_last := FB_Limiter[1].Out;
				ELSE
					FB_Limiter[1].Enable := FALSE;
				ENDIF
			ENDIF
			
			//As soon as the target value of the ramp is reached, end ramp
			IF g_r_last_ramp = g_r_last THEN
				g_b_ramp_active[0] := FALSE;
			ENDIF
			
			IF g_r_last_ramp_extern = g_r_last THEN
				FB_Limiter[1].Enable := FALSE;
			ENDIF
			
			//In field test operation, always at least 5% load
			IF (g_i_status_PL = 4) AND (g_r_last < 8.2)  THEN
				g_r_last := 8.2;
			ENDIF		
			
			//Fluctuating biogas composition in field test
			// -> Correction value and adjustment term (empirically determined) for biogas MFC control
			l_r_sigma_H2_CO2 := 4.2887 * brmpow(g_r_last,-0.094) + g_r_sigma_korr - 0.16 * (g_r_last - 23.2) / (100.0 - 23.2) - 6 - g_r_sigma_H2_CO2;
			
			//Calculation of feed gas quantities based on manual input (visualization)
			g_r_y_in_react_percent[3] := 0;		//Can be commented out in case of feed gas steam addition
			g_r_y_in_react[3] := g_r_y_in_react_percent[3] / 100;		//Conversion of the percentage values specified in the visualization to mole fraction
			g_r_y_in_bio_react[0] := g_r_y_in_bio_react_percent[0] / 100;
			g_r_y_in_bio_react[1] := 1 - g_r_y_in_bio_react[0];		//CH4 content in biogas
			
			g_volf_in_react[0].l_min := g_r_last / 100 * g_mfc_MFC[1].r_max; 	//at full load -> 115 Nl/min
			g_volf_in_react[0].m3_s := g_volf_in_react[0].l_min / G_R_VOFL_U;
			g_r_nf_in_react[0] := G_R_P0 * 100000 * g_volf_in_react[0].m3_s / (G_R_R_UNI * G_R_T0);
			g_r_nf_in_react[1] := g_r_nf_in_react[0] / l_r_sigma_H2_CO2;
			g_r_nf_in_react[2] := g_r_y_in_bio_react[1] / g_r_y_in_bio_react[0] * g_r_nf_in_react[1];
			g_r_nf_in_bio := g_r_nf_in_react[1] + g_r_nf_in_react[2];
			g_volf_in_bio.m3_s := g_r_nf_in_bio * G_R_R_UNI * G_R_T0 / (G_R_P0 * 100000);
			g_volf_in_bio.l_min := g_volf_in_bio.m3_s * G_R_VOFL_U;
			g_volf_in_bio.m3_h := g_volf_in_bio.m3_s * 3600;
			g_r_nf_in :=  g_r_nf_in_react[0] + g_r_nf_in_react[1] + g_r_nf_in_react[2] + g_r_nf_in_react[3];
			g_volf_in.m3_s := g_r_nf_in * G_R_R_UNI * G_R_T0 / (G_R_P0 * 100000);		//Total standard volume flow
			g_volf_in.l_min := g_volf_in.m3_s * G_R_VOFL_U;	
			LOOP l_i_r = 0 TO 2 DO		//Mole fraction
				g_r_y_in_react[l_i_r] := g_r_nf_in_react[l_i_r] / g_r_nf_in;
			ENDLOOP
			LOOP l_i_r = 1 TO 3 DO		//Species standard volume flows
				g_volf_in_react[l_i_r].m3_s := g_r_y_in_react[l_i_r] * g_volf_in.m3_s;
				g_volf_in_react[l_i_r].l_min := g_volf_in_react[l_i_r].m3_s * G_R_VOFL_U;
			ENDLOOP

			//Manual operation: In ramp mode, time delay -> H2 excess
			IF (FB_Limiter[0].Enable) OR (FB_Limiter[1].Enable) THEN
				IF FB_Limiter[0].Enable THEN	//Manual operation
					IF g_r_last >= g_r_last_ramp THEN 	//In descending ramp: H2 delayed
						g_r_DE_adapt := g_r_DE_adapt_des;
						FB_TimeDelay[1].InitialValue := l_vofl_in_h2.l_min;		//Input value for t < DelayTime
						FB_TimeDelay[1].DelayTime := 3;		//Set delay
						FB_TimeDelay[1].Enable := TRUE;							
						FB_TimeDelay[1].In := g_volf_in_react[0].l_min;		//Input value for t >= DelayTime
						FB_TimeDelay[1] FUB MTBasicsTimeDelay();		//Function call MTBasicsTimeDelay
						l_vofl_in_h2.l_min :=	FB_TimeDelay[1].Out;		//Output value
						FB_TimeDelay[2].Enable := FALSE;
						l_vofl_in_bio.l_min :=	g_volf_in_bio.l_min;
					ELSE
						//In ascending ramp: Biogas delayed
						g_r_DE_adapt := g_r_DE_adapt_asc;
						FB_TimeDelay[1].Enable := FALSE;
						FB_TimeDelay[2].InitialValue := l_vofl_in_bio.l_min;		//Input value for t < DelayTime
						FB_TimeDelay[2].DelayTime := 3;		//Set delay
						FB_TimeDelay[2].Enable := TRUE;							
						FB_TimeDelay[2].In := g_volf_in_bio.l_min;		//Input value for t >= DelayTime
						FB_TimeDelay[2] FUB MTBasicsTimeDelay();		//Function call MTBasicsTimeDelay
						l_vofl_in_bio.l_min :=	FB_TimeDelay[2].Out;		//Output value
						l_vofl_in_h2.l_min :=	g_volf_in_react[0].l_min;
					ENDIF
				ENDIF
				IF FB_Limiter[1].Enable THEN	//Automatic operation
					IF g_r_last >= g_r_last_ramp_extern THEN 	//In descending ramp: H2 delayed
						g_r_DE_adapt := g_r_DE_adapt_des;
						FB_TimeDelay[1].InitialValue := l_vofl_in_h2.l_min;		//Input value for t < DelayTime
						FB_TimeDelay[1].DelayTime := 3;		//Set delay
						FB_TimeDelay[1].Enable := TRUE;							
						FB_TimeDelay[1].In := g_volf_in_react[0].l_min;		//Input value for t >= DelayTime
						FB_TimeDelay[1] FUB MTBasicsTimeDelay();		//Function call MTBasicsTimeDelay
						l_vofl_in_h2.l_min :=	FB_TimeDelay[1].Out;		//Output value
						FB_TimeDelay[2].Enable := FALSE;
						l_vofl_in_bio.l_min :=	g_volf_in_bio.l_min;
					ELSE
						//In ascending ramp: Biogas delayed
						g_r_DE_adapt := g_r_DE_adapt_asc;
						FB_TimeDelay[1].Enable := FALSE;
						FB_TimeDelay[2].InitialValue := l_vofl_in_bio.l_min;		//Input value for t < DelayTime
						FB_TimeDelay[2].DelayTime := 3;		//Set delay
						FB_TimeDelay[2].Enable := TRUE;							
						FB_TimeDelay[2].In := g_volf_in_bio.l_min;		//Input value for t >= DelayTime
						FB_TimeDelay[2] FUB MTBasicsTimeDelay();		//Function call MTBasicsTimeDelay
						l_vofl_in_bio.l_min :=	FB_TimeDelay[2].Out;		//Output value
						l_vofl_in_h2.l_min :=	g_volf_in_react[0].l_min;
					ENDIF
				ENDIF				
			ELSE
				FB_TimeDelay[1].Enable := FALSE;
				FB_TimeDelay[2].Enable := FALSE;
				g_r_DE_adapt := 1;
				l_vofl_in_h2.l_min :=	g_volf_in_react[0].l_min;
				l_vofl_in_bio.l_min :=	g_volf_in_bio.l_min;
			ENDIF
			
			//MFC: Setpoint flow rate -> Analog Output 4-20 mA
			g_mfc_MFC[1].r_soll := l_vofl_in_h2.l_min;
			g_mfc_MFC[2].r_soll := l_vofl_in_bio.l_min;
			LOOP l_i = 1 TO 2 DO
				g_mfc_MFC[l_i].i_ao := INT((g_mfc_MFC[l_i].r_soll * (G_R_ANALOG_SIGNAL*16/20) / (g_mfc_MFC[l_i].r_max-g_mfc_MFC[l_i].r_min)) + G_R_ANALOG_SIGNAL*4/20);
				IF g_mfc_MFC[l_i].i_ao >= INT(G_R_ANALOG_SIGNAL) THEN		//Safety for rounding errors
					g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL);
				ELSE
					IF g_mfc_MFC[l_i].i_ao <= INT(G_R_ANALOG_SIGNAL*4/20) THEN
						g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
					ENDIF
				ENDIF
			ENDLOOP
		ENDACTION
		
		ACTION 3: 	//Pure hydrogen supply - Field test (For start-up and shut-down)
			l_i_status_GR := 3;
			g_b_MV[1] := TRUE;					
			g_b_MV[2] := FALSE;
			g_b_MV[3] := FALSE;
			
			g_r_last := 0;
			g_r_last_ramp := 0;
			g_volf_in_bio.l_min := 0;
			g_mfc_MFC[2].r_soll := 0;
			g_volf_in_bio.m3_h := g_volf_in_bio.l_min * 60 / 1000;
			g_r_nf_in_react[0] := 0.00371;
			
			//MFC: Setpoint flow rate of H2 -> Analog Output 4-20 mA
			g_mfc_MFC[1].r_soll := 5;
			g_mfc_MFC[1].i_ao := INT((g_mfc_MFC[1].r_soll * (G_R_ANALOG_SIGNAL*16/20) / (g_mfc_MFC[1].r_max-g_mfc_MFC[1].r_min)) + G_R_ANALOG_SIGNAL*4/20);
		ENDACTION
		
		ACTION 4: 	//Nitrogen purge 
			IF l_i_status_GR <> 4 THEN		//One-time action when switching to nitrogen purge
				LOOP l_i = 3 TO 4 DO					
					FB_TimeDelay[l_i].In := 0;					
				ENDLOOP
			ENDIF
			l_i_status_GR := 4;
			g_b_MV[2] := TRUE;
			
			g_r_last := 0;		//Biogas flow rate and thus also H2 and H2O flow to zero
			g_r_last_ramp := 0;
			g_volf_in_bio.l_min := 0;
			g_volf_in_bio.m3_h := g_volf_in_bio.l_min * 60 / 1000;
			g_r_nf_in_react[0] := 0;
			g_volf_in_react[0].m3_s := 0;
			g_volf_in_react[1].m3_s := 0;
			g_volf_in_react[2].m3_s := 0;
			g_volf_in.m3_s := 0;
			//MFC: Setpoint flow rate to ZERO -> Analog Output 4-20 mA
			LOOP l_i = 1 TO 2 DO
				g_mfc_MFC[1].r_soll := 0;
				g_mfc_MFC[l_i].i_ao := INT((g_mfc_MFC[1].r_soll * (G_R_ANALOG_SIGNAL*16/20) / (g_mfc_MFC[1].r_max-g_mfc_MFC[1].r_min)) + G_R_ANALOG_SIGNAL*4/20);
				IF g_mfc_MFC[l_i].i_ao >= G_R_ANALOG_SIGNAL THEN		//Safety for rounding errors
					g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL);
				ELSE
					IF g_mfc_MFC[l_i].i_ao <= (G_R_ANALOG_SIGNAL*4/20) THEN
						g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
					ENDIF
				ENDIF
			ENDLOOP
			
			LOOP l_i = 3 TO 4 DO
				FB_TimeDelay[l_i] FUB MTBasicsTimeDelay();		//Time-delayed closing of the solenoid valves						
			ENDLOOP
			
			IF EDGENEG(BOOL(FB_TimeDelay[3].Out)) THEN	
				g_b_MV[1] := FALSE;	
				FB_TimeDelay[3].In := 1;
			ENDIF
			IF EDGENEG(BOOL(FB_TimeDelay[4].Out)) THEN	
				g_b_MV[3] := FALSE;	
				FB_TimeDelay[4].In := 1;
			ENDIF
		ENDACTION
		
		ELSEACTION:	//Error: No defined status
			l_i_status_GR := 5;
			g_b_error[57] := TRUE;
			g_volf_in_bio.l_min := 0;		//Biogas flow rate to zero
			g_volf_in_bio.m3_h := g_volf_in_bio.l_min * 60 / 1000;
			g_b_MV[1] := FALSE;		//Solenoid valves closed
			g_b_MV[3] := FALSE;

			LOOP l_i = 1 TO 2 DO		//Output signal to MFCs to zero
				g_mfc_MFC[l_i].r_soll := 0;
				g_mfc_MFC[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP	
		ENDACTION
	ENDCASE
	
	//GHSV
	g_r_GHSV := g_volf_in.m3_s * 3600 / L_R_VOL_R;
	
	//Conversion performance
	IF g_r_sigma_H2_CO2 <= 4 THEN
		g_r_P_U := g_volf_in_react[0].m3_s * L_R_H_U_H2;
	ELSE
		g_r_P_U := 4 * g_volf_in_react[1].m3_s * L_R_H_U_H2;
	ENDIF
	
	//Synthesis performance
	g_r_P_syn := g_volf_in_react[0].m3_s * L_R_H_U_H2 + g_volf_in_react[2].m3_s * L_R_H_U_CH4;
END_PROGRAM

PROGRAM _EXIT
	LOOP l_i = 0 TO 4 DO
		FB_TimeDelay[l_i].Enable := FALSE;
		FB_TimeDelay[l_i] FUB MTBasicsTimeDelay();
	ENDLOOP
END_PROGRAM

