(********************************************************************
 * Programm: System_Status
 * Autor: Markthaler
 * Erstellt: 30.03.2022
 * Note: Definition of the system status and control of the signal lights
 ********************************************************************)

PROGRAM _INIT
	//Pulse control of the signal lights for flashing light signal: Initialization of the control parameters for pulse frequency modulation
	FB_PFM[0].PulseWidth := 1.5;  
	FB_PFM[0].MinPause := 1.5;

	// For data recording
	FB_PFM[1].PulseWidth := 0.5;  
	FB_PFM[1].MinPause := 60;
	
	// Initialization of the parameters for pulse frequency modulation for periodic gas measurement
	FB_PFM[2].PulseWidth := 599;  
	FB_PFM[2].MinPause := 1;
		
	// System status set to idle state
	g_i_status_PL := 0;
	l_i_status_PL := 0;
	g_b_status_PL[g_i_status_PL] := TRUE;
	LOOP l_i = 0 TO 9 DO			// Others = FALSE
		IF l_i <> g_i_status_PL THEN
			g_b_status_PL[l_i] := FALSE;
		ENDIF
	ENDLOOP
END_PROGRAM

PROGRAM _CYCLIC
	// Determination of the maximum bed temperature
	g_r_T_cat_max[0] := 0;
	g_r_T_cat_max[1] := 0;
	g_r_T_cat_max[2] := 0;
	LOOP l_i = 6 TO 18 DO			// Determination of the maximum temperature in stage 1
		g_r_T_cat_max[0] := MAX(g_r_T_cat_max[0], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	LOOP l_i = 27 TO 36 DO			// Determination of the maximum temperature in stage 2
		g_r_T_cat_max[1] := MAX(g_r_T_cat_max[1], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	LOOP l_i = 9 TO 18 DO			// Determination of the maximum temperature in stage 1 (Only multipoint thermocouple)
		g_r_T_cat_max[2] := MAX(g_r_T_cat_max[2], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	l_r_T_cat_max := MAX(g_r_T_cat_max[0], g_r_T_cat_max[1]);
	
	// Change of system status
	LOOP l_i = 0 TO 9 DO			// Pressing the toggle button (g_b_status_PL[l_i] = TRUE) -> Change of g_i_status_PL (Visualization)
		IF l_b_status_PL[l_i] <> g_b_status_PL[l_i] THEN
			IF g_b_status_PL[l_i] THEN
				g_i_status_PL := l_i;
			ENDIF
			l_b_status_PL[l_i] := g_b_status_PL[l_i];
		ENDIF
	ENDLOOP
		
	CASE g_i_status_PL OF
		ACTION 0:		// System: Idle state
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
			ENDIF
			g_i_status_GAL := 0;
			LOOP l_i = 1 TO 10 DO
				g_i_status_HZ[l_i] := 0;
				g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll := 0;
			ENDLOOP
			LOOP l_i = 1 TO 2 DO
				g_i_status_PIRC[l_i] := 0;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP
			g_i_status_GR := 0;
			g_i_status_SG := 0;
			g_i_status_CON := 0;
			g_i_status_WS := 0;
			
			// Release relay for heaters and PM2 deactivated
			g_b_FG1 := FALSE;
			g_b_FG2 := FALSE;
			
			// GSM module is deactivated
			g_b_GSM1_active := FALSE;
			
			// Signal lights for operation and error OFF
			g_b_SA1[0] := FALSE;
			g_b_SA1[2] := FALSE;
			
			g_i_status_PL_extern_auto := 2;
		ENDACTION
		
		ACTION 1:		// System: Startup - Laboratory
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when switching to startup
				g_i_status_GAL := 0;		// Gas measurement off
				g_i_period_GAL := 0;		// and periodic measurement off
				LOOP l_i = 1 TO 9 DO		// Start up heaters
					g_i_status_HZ[l_i] := 1;	
				ENDLOOP
				g_i_status_GR := 1;		// Gas regulation to laboratory operation
				g_i_status_CON := 1;		// Condenser cooling to manual
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20);		// Proportional valve to condenser 1 (cooling water) closed
				g_b_MV[11] := FALSE;		// Solenoid valve to condenser 2 (cooling water) closed
				g_i_status_WS := 2;		// Level control in the storage tank ON
				g_b_FG1 := TRUE;		// Activate release relay
				g_b_FG2 := TRUE;		// Activate release relay
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			// Automatic operation OFF
			g_b_auto = FALSE;
						
			// Control of the signal light (Green = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;		// Utilization of FB_PFM.MinPause (Always alternating pulse and MinPause)
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 2:		 // System: Startup - Field test
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when switching to startup
				g_i_status_GAL := 0;		// Gas measurement off 
				g_i_period_GAL := 0;		// and periodic measurement off
				LOOP l_i = 1 TO 9 DO		// Start up heaters
					g_i_status_HZ[l_i] := 1;	
				ENDLOOP
				g_i_status_GR := 0;		// Gas regulation OFF
				g_i_status_CON := 0;		// Condenser cooling OFF
				g_i_status_SG := 2;		// Steam generator control ON
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20);		// Proportional valve to condenser 1 (cooling water) closed
				g_b_MV[11] := TRUE;		// Solenoid valve to condenser 2 (cooling water) closed
				g_i_status_WS := 2;		// Level control in the storage tank ON
				g_b_FG1 := TRUE;		// Activate release relay
				g_b_FG2 := TRUE;		// Activate release relay
				g_b_GSM1_active := TRUE;		// Activate GSM module
				l_b_enabled := TRUE;
				l_i_status_PL := g_i_status_PL;
				g_r_startup := 0;
				g_i_status_PL_extern_auto := 3;
			ENDIF

			// Routine for the autonomous startup of the system via rule-based control
			IF g_r_startup >= 3 THEN
				g_i_status_GR := 3;		// Gas regulation H2 purge
				IF g_r_startup >= 4 THEN
					g_i_status_GR := 2;		// Gas regulation field test ON
					g_i_status_PIRC[2] := 1;		// Pressure control of the process gas side ON
					g_r_last := 8.2;		// Current load at 8.2%
					g_r_last_ramp := 8.2;
					IF l_b_enabled THEN		// Executed only once
						g_r_last_ramp_extern := 8.2;		
						g_r_p_soll_PIRC[2] := 4;		// Pressure for process gas side in bar_rel
						g_pres_PIRC[2].r_soll := 4;		
						l_b_enabled := FALSE;
					ENDIF
					g_i_status_CON := 2;		// Condenser cooling ON
					g_i_status_GAL := 3;		// Gas measurement 2nd stage
					IF g_r_startup >= 7 THEN
						g_i_period_GAL := 4;		// Gas analysis periodic ON
						IF g_r_startup >= 8 THEN
							g_i_status_PL := 4;		// Operation field test		
						ENDIF
					ENDIF
				ENDIF
			ENDIF
			
			// Safety in case of control malfunction of the PID modules for temperature control
			LOOP l_i = 1 TO 9 DO
				IF g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist > 60 THEN
					// If actual temperature value > 1.5 * set temperature value -> Heater off
					IF (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist > (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll * 1.5)) THEN
						g_i_status_HZ[l_i] := 0;
					ENDIF
					// If actual temperature value reaches approximately set temperature value level again -> Heater on
					IF (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist < (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll * 1.01)) THEN
						g_i_status_HZ[l_i] := 1;
					ENDIF
				ENDIF
			ENDLOOP
						
			// Control of the signal light (Green = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;		// Utilization of FB_PFM.MinPause (Always alternating pulse and MinPause)
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 3:		// System: Operation - Laboratory
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when starting up
				g_i_period_GAL := 0;		// Periodic GAL measurement off
				LOOP l_i = 1 TO 9 DO		// Heaters ON
					g_i_status_HZ[l_i] := 2;	
				ENDLOOP
				g_i_status_GR := 2;		// Gas regulation ON - field test
				g_i_status_CON := 2;		// Condenser cooling initially manual
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20);		// Proportional valve to condenser 1 (cooling water) initially closed
				g_i_status_WS := 2;		// Level control in the storage tank ON
				g_b_FG1 := TRUE;		// Activate release relay
				g_b_FG2 := TRUE;		// Activate release relay
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			// Automatic operation OFF
			g_b_auto = FALSE;
			
			// Control of the signal light (Green)
			g_b_SA1[0] := TRUE;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 4:		// System: Operation - Field test
			// From outside, the load and thus the set biogas flow rate can be specified
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when starting up
				LOOP l_i = 1 TO 9 DO		// Heaters ON
					g_i_status_HZ[l_i] := 2;	
				ENDLOOP
				g_i_status_GR := 2;		// Gas regulation ON - field test
				g_i_status_CON := 2;		// Condenser cooling ON
				g_i_status_SG := 2;		// Steam generator control ON
				g_i_status_WS := 2;		// Level control in the storage tank ON
				g_b_FG1 := TRUE;		// Activate release relay
				g_b_FG2 := TRUE;		// Activate release relay
				g_b_GSM1_active := TRUE;		// Activate GSM module
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 4;
			ENDIF
								
			// Control of the signal light (Green)
			g_b_SA1[0] := TRUE;	
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 5:		// System: Cooldown - Laboratory
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when starting up
				g_i_status_GAL := 2;		// Gas measurement to 1st stage and 
				g_i_period_GAL := 1;		// and periodic measurement
				LOOP l_i = 2 TO 5 DO		// Heaters OFF (except product gas discharge and steam addition)
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				LOOP l_i = 7 TO 10 DO			
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				LOOP l_i = 1 TO 2 DO		// Pressure control still ON
					g_i_status_PIRC[l_i] := 1;	
				ENDLOOP
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			// Automatic operation OFF
			g_b_auto = FALSE;
			
			// Control of the signal light (Green = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 20;		// During cooldown, pause times are increased
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 6:		// System: Cooldown - Field test
			IF l_i_status_PL <> g_i_status_PL THEN		// One-time action when starting up
				g_i_status_GAL := 0;		// Gas measurement OFF
				g_i_period_GAL := 0;		// and periodic measurement OFF
				LOOP l_i = 1 TO 5 DO		// Heaters OFF
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				g_i_status_HZ[6] := 2;		// Biogas supply: Heater remains on to avoid droplet formation there when restarting from shutdown status
				g_temp_TIRC[16].r_soll := 80;	
				LOOP l_i = 7 TO 9 DO		// Heaters OFF
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				g_i_status_GR := 3;			// Gas regulation H2 purge
				g_i_status_PIRC[2] := 2;		// Controlled opening of the process gas valve
				g_i_status_CON := 0;		// Condenser cooling OFF
				g_i_status_SG := 0;		// Steam generator control OFF
				g_i_status_WS := 0;		// Level control in the storage tank OFF
				g_b_FG1 := TRUE;		// Activate release relay
				g_b_FG2 := TRUE;		// Activate release relay
				g_b_GSM1_active := TRUE;		// Activate GSM module
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 2;
			ENDIF

			# Cooldown routine is based on rule-based control w.r.t. the catalyst temperature		
			IF g_r_T_cat_max[2] < 310 THEN
				g_i_status_GR := 0;		// Gas regulation OFF
			ENDIF
			
			IF g_r_T_cat_max[2] < 175 THEN
				g_i_status_PL := 0;		// System shutdown
			ENDIF
						
			// Control of the signal light (Green = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 20;		// During cooldown, pause times are increased
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 7:		// System: Error
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
				
				// Deactivate release relay
				g_b_FG1 := FALSE;
				g_b_FG2 := FALSE;
			ENDIF
			
			// Error message via GSM module
			IF g_b_GSM1_active THEN
				g_b_GSM1_IN5 := TRUE;	
			ENDIF
			
			// Automatic operation OFF
			g_b_auto = FALSE;
			
			// Control of the signal light (Red)
			g_b_SA1[0] := FALSE;
			g_b_SA1[2] := TRUE;
			
			// Trigger the horn for 5 seconds
			FB_TP_10ms[0].IN = g_b_e_add;
			FB_TP_10ms[0].PT = 500;
			FB_TP_10ms[0] FUB TP_10ms()
			g_b_SA1[4] := FB_TP_10ms[0].Q;	
		ENDACTION
		
		ACTION 8:		// System: Manual operation without start conditions
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			// Control of the signal light (Yellow = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[1] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 9:		// System: Standby -> Reactors are kept at temperature
			IF l_i_status_PL <> g_i_status_PL THEN
				g_i_status_GAL := 0;		// Gas measurement OFF
				g_i_period_GAL := 0;		// and periodic measurement OFF
				LOOP l_i = 1 TO 2 DO		// Pressure control OFF
					g_i_status_PIRC[l_i] := 0;
					g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
				ENDLOOP
				IF (l_i_status_PL = 2) OR (l_i_status_PL = 4) OR (l_i_status_PL = 6) THEN		// If previously in field test
					g_i_status_GR := 3;		// Gas regulation H2 purge
					l_b_GR_H2 := TRUE;						
				ELSE
					g_i_status_GR := 0;		// Gas regulation OFF
					l_b_GR_H2 := FALSE;		
				ENDIF
				
				g_i_status_CON := 0;		// Condenser cooling OFF
				g_i_status_SG := 0;		// Steam generator control OFF
				g_i_status_WS := 0;		// Level control in the storage tank OFF
			
				// Activate release relay
				g_b_FG1 := TRUE;
				g_b_FG2 := TRUE;
				
				// Only HP reactor heating and biogas heating activate
				LOOP l_i = 1 TO 9 DO			
					g_i_status_HZ[l_i] := 0;
				ENDLOOP
				g_i_status_HZ[8] := 2;		// HP reactor ON
				g_temp_TIRC[4].r_soll := 220;		// HP reactor heating temperature in standby
				g_i_status_HZ[6] := 2;		// Biogas supply ON, to avoid droplet formation there when restarting from standby
				g_temp_TIRC[16].r_soll := 70;
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 1;
			ENDIF
			
			FB_TP_10ms[1].IN = l_b_GR_H2;
			FB_TP_10ms[1].PT = 30000;
			FB_TP_10ms[1] FUB TP_10ms()
			IF FB_TP_10ms[1].Q = FALSE THEN
				g_i_status_GR := 0;		// Gas regulation OFF
				l_b_GR_H2 := FALSE;
			ENDIF
			
			// Control of the signal light (Yellow = flashing)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			
			FB_PFM[0] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
			g_b_SA1[1] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ELSEACTION:	// Error: No defined status
			g_b_error[42] := TRUE;
			//System off:
			g_i_status_GAL := 0;
			LOOP l_i = 1 TO 10 DO
				g_i_status_HZ[l_i] := 0;
			ENDLOOP
			LOOP l_i = 1 TO 2 DO
				g_i_status_PIRC[l_i] := 0;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP
			g_i_status_GR := 0;
			g_i_status_SG := 0;
			g_i_status_CON := 0;
			g_i_status_WS := 0;
			g_b_auto = FALSE;
		ENDACTION
	ENDCASE	
	
	// In case of warning: Signal light to orange and trigger the horn for 2.5 seconds in case of warning
	IF g_i_w_sum > 0 THEN
		IF g_b_GSM1_active THEN
			g_b_GSM1_IN4 := TRUE;		// Warning message via GSM module
		ENDIF
		g_b_SA1[1] := TRUE;
	ENDIF
	FB_TP_10ms[0].IN = g_b_w_add;
	FB_TP_10ms[0].PT = 250;
	FB_TP_10ms[0] FUB TP_10ms()
	g_b_SA1[4] := FB_TP_10ms[0].Q;	
	
	// System status in visualization (ContentStatusPage)
	g_b_status_PL[g_i_status_PL] := TRUE;
	LOOP l_i = 0 TO 9 DO		// All others = FALSE
		IF l_i <> g_i_status_PL THEN
			g_b_status_PL[l_i] := FALSE;
		ENDIF
	ENDLOOP
	
	// For visualization of the system status in ContentLeft and ContentStatus (See EventBinding) 
	IF g_i_w_sum > 0 THEN
		IF g_i_e_sum > 0 THEN
			g_i_status_PL_mV := 7;
		ELSE
			g_i_status_PL_mV := 9;
		ENDIF
	ELSE
		g_i_status_PL_mV := g_i_status_PL;
	ENDIF
	
	// For control-side detection of data recording: 
	(* Every minute g_b_data_active is set to FALSE, 
	can only be set to TRUE by the data recording side *)
	FB_PFM[1].Enable := TRUE;
	FB_PFM[1].DutyCycle := 99;			
	FB_PFM[1] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation
	IF FB_PFM[1].Out THEN
		g_b_data_active := FALSE;
	ENDIF
	g_b_SA1[3] := g_b_data_active;		// Signal data recording via signal light

	// In automatic/ autonomous operation in field test - possibility to externally change the system status
	IF g_b_auto = TRUE THEN
		IF g_i_status_PL_extern = 2 THEN	// Startup
			IF g_i_status_PL = 4 THEN
				g_i_status_PL := 4;
			ELSE
				g_i_status_PL := 2;
			ENDIF
		ENDIF
		IF g_i_status_PL_extern = 6 THEN	// Cooldown
			IF g_i_status_PL = 0 THEN
				g_i_status_PL := 0;
			ELSE
				g_i_status_PL := 6;
			ENDIF
		ENDIF
		IF g_i_status_PL_extern = 9 THEN	// Standby
			g_i_status_PL := 9;
		ENDIF
		IF g_i_status_PL = 4 THEN
			IF g_i_status_PL_extern = 10 THEN		// Partial load
				g_r_last_ramp_extern := 23.2;		// Can be adjusted to different load levels OP1 or OP2
				g_i_status_PL_extern_auto := 4;
			ENDIF	
			IF g_i_status_PL_extern = 11 THEN		// Full Load
				g_r_last_ramp_extern := 100;		// Can be adjusted to different load levels OP1 or OP2
				g_i_status_PL_extern_auto := 5;
			ENDIF
		ENDIF
					
		// Time step recording in autonomous operation
		FB_PFM[2].Enable := TRUE;
		FB_PFM[2].DutyCycle := 99;		// Utilization of FB_PFM.MinPause = 1s (Always alternating pulse and MinPause)
		FB_PFM[2] FUB MTBasicsPFM();		// Function call MTBasicsPFM pulse frequency modulation	
		IF EDGEPOS(FB_PFM[2].Out) THEN		// On positive edge, increase the time step by 1
			g_i_time_step_extern_auto := g_i_time_step_extern_auto + 1;
		ENDIF	
	ELSE
		FB_PFM[2].Enable := FALSE;
		g_i_time_step_extern_auto := 0;
	ENDIF
	

END_PROGRAM

PROGRAM _EXIT

END_PROGRAM

