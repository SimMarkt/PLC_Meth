(********************************************************************
 * Programm: System Status
 * Autor: Markthaler
 * Erstellt: 30.03.2022
 * Note: Definition of the system status and control of the signal lights
 ********************************************************************)

PROGRAM _INIT
	//Pulse control of the signal lights for flashing light signal: Initialization of the control parameters for pulse frequency modulation
	FB_PFM[0].PulseWidth := 1.5;  
	FB_PFM[0].MinPause := 1.5;

	// For data recording
	FB_PFM[1].PulseWidth := 0.5;  
	FB_PFM[1].MinPause := 60;
	
	// Initialization of the parameters for pulse frequency modulation for periodic gas measurement
	FB_PFM[2].PulseWidth := 599;  
	FB_PFM[2].MinPause := 1;
		
	// System status set to idle state
	g_i_status_PL := 0;
	l_i_status_PL := 0;
	g_b_status_PL[g_i_status_PL] := TRUE;
	LOOP l_i = 0 TO 9 DO			// Others = FALSE
		IF l_i <> g_i_status_PL THEN
			g_b_status_PL[l_i] := FALSE;
		ENDIF
	ENDLOOP
END_PROGRAM

PROGRAM _CYCLIC
	// Determination of the maximum bed temperature
	g_r_T_cat_max[0] := 0;
	g_r_T_cat_max[1] := 0;
	g_r_T_cat_max[2] := 0;
	LOOP l_i = 6 TO 18 DO			// Determination of the maximum temperature in stage 1
		g_r_T_cat_max[0] := MAX(g_r_T_cat_max[0], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	LOOP l_i = 27 TO 36 DO			// Determination of the maximum temperature in stage 2
		g_r_T_cat_max[1] := MAX(g_r_T_cat_max[1], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	LOOP l_i = 9 TO 18 DO			// Determination of the maximum temperature in stage 1 (Only multipoint thermocouple)
		g_r_T_cat_max[2] := MAX(g_r_T_cat_max[2], g_temp_TIR[l_i].r_ist);
	ENDLOOP
	l_r_T_cat_max := MAX(g_r_T_cat_max[0], g_r_T_cat_max[1]);
	
	// Change of system status
	LOOP l_i = 0 TO 9 DO					// Pressing the toggle button (g_b_status_PL[l_i] = TRUE) -> Change of g_i_status_PL (Visualization)
		IF l_b_status_PL[l_i] <> g_b_status_PL[l_i] THEN
			IF g_b_status_PL[l_i] THEN
				g_i_status_PL := l_i;
			ENDIF
			l_b_status_PL[l_i] := g_b_status_PL[l_i];
		ENDIF
	ENDLOOP
		
	CASE g_i_status_PL OF
		ACTION 0:		// System: Idle state
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
			ENDIF
			g_i_status_GAL := 0;
			LOOP l_i = 1 TO 10 DO
				g_i_status_HZ[l_i] := 0;
				g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll := 0;
			ENDLOOP
			LOOP l_i = 1 TO 2 DO
				g_i_status_PIRC[l_i] := 0;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP
			g_i_status_GR := 0;
			g_i_status_SG := 0;
			g_i_status_CON := 0;
			g_i_status_WS := 0;
			
			// Release relay for heaters and PM2 deactivated
			g_b_FG1 := FALSE;
			g_b_FG2 := FALSE;
			
			// GSM module is deactivated
			g_b_GSM1_active := FALSE;
			
			// Signal lights for operation and error OFF
			g_b_SA1[0] := FALSE;
			g_b_SA1[2] := FALSE;
			
			g_i_status_PL_extern_auto := 2;
		ENDACTION
		
		ACTION 1:		// System: Startup - Laboratory
			IF l_i_status_PL <> g_i_status_PL THEN					// One-time action when switching to startup
				g_i_status_GAL := 0;			// Gas measurement off
				g_i_period_GAL := 0;			// and periodic measurement off
				LOOP l_i = 1 TO 9 DO			// Start up heaters
					g_i_status_HZ[l_i] := 1;	
				ENDLOOP
				g_i_status_GR := 1;				//Gasregelung auf Laborbetrieb
				g_i_status_CON := 1;			//Kondensatork�hlung auf manuell
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20); 	//Proportionalventil zu Kondensator 1 (K�hlwasser) geschlossen
				g_b_MV[11] := FALSE;						//Magnetventil zu Kondensator 2 (K�hlwasser) geschlossen
				g_i_status_WS := 2;				//F�llstandsregelung im Vorlagebeh�lter EIN
				g_b_FG1 := TRUE;				//Freigabe-Relais aktivieren
				g_b_FG2 := TRUE;				//Freigabe-Relais aktivieren
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			//Automatikbetrieb AUS
			g_b_auto = FALSE;
						
			//Ansteuerung der Signalampel (Gr�n = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			//Ausnutzung von FB_PFM.MinPause (Immer abwechselnd Pulse und MinPause)
			FB_PFM[0] FUB MTBasicsPFM();					//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 2:		//Anlage: Anfahren - Feldtest
			IF l_i_status_PL <> g_i_status_PL THEN					//Einmalige Aktion beim Wechsel von Anfahren
				g_i_status_GAL := 0;			//Gasmessung aus 
				g_i_period_GAL := 0;			//und periodisch gemessen aus
				LOOP l_i = 1 TO 9 DO			//Heizungen anfahren
					g_i_status_HZ[l_i] := 1;	
				ENDLOOP
				g_i_status_GR := 0;				//Gasregelung AUS
				g_i_status_CON := 0;			//Kondensatork�hlung AUS
				g_i_status_SG := 2;				//Dampferzeugerregelung EIN
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20); 	//Proportionalventil zu Kondensator 1 (K�hlwasser) geschlossen
				g_b_MV[11] := TRUE;						//Magnetventil zu Kondensator 2 (K�hlwasser) geschlossen
				g_i_status_WS := 2;				//F�llstandsregelung im Vorlagebeh�lter EIN
				g_b_FG1 := TRUE;				//Freigabe-Relais aktivieren
				g_b_FG2 := TRUE;				//Freigabe-Relais aktivieren
				g_b_GSM1_active := TRUE;		//GSM-Modul aktivieren
				l_b_enabled := TRUE;
				l_i_status_PL := g_i_status_PL;
				g_r_startup := 0;
				g_i_status_PL_extern_auto := 3;
			ENDIF

			// Routine für das autonomatische Anfahren der Anlage über Rule-based control
			IF g_r_startup >= 3 THEN
				g_i_status_GR := 3;				//Gasregelung H2-Sp�lung
				IF g_r_startup >= 4 THEN
					g_i_status_GR := 2;				//Gasregelung Feldtest EIN
					g_i_status_PIRC[2] := 1;		//Druckregelung der Prozessgasseite EIN
					g_r_last := 8.2;					//Aktuelle Last auf 8.2%
					g_r_last_ramp := 8.2;
					IF l_b_enabled THEN				//Werden nur einmal ausgef�hrt
						g_r_last_ramp_extern := 8.2;		
						g_r_p_soll_PIRC[2] := 4;		//Druck f�r Prozessgasseite in bar_rel
						g_pres_PIRC[2].r_soll := 4;		
						l_b_enabled := FALSE;
					ENDIF
					g_i_status_CON := 2;			//Kondensatork�hlung EIN
					g_i_status_GAL := 3;			//Gasmessung 2.Stufe
					IF g_r_startup >= 7 THEN
						g_i_period_GAL := 4;			//Gasanalyse periodisch EIN
						IF g_r_startup >= 8 THEN
							// g_r_last_ramp_extern := 23.2; // Anpassung bei autonomen Berieb
							g_i_status_PL := 4; 		//Betrieb Feldtest		
						ENDIF
					ENDIF
				ENDIF
			ENDIF
			
			//Sicherheit bei steuerungsseitiger Fehlfunktion der PID-Module f�r die Temperaturregelung
			LOOP l_i = 1 TO 9 DO
				IF g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist > 60 THEN
					// Falls Ist-Temperaturwert > 1,5 * Soll-Temperaturwert -> Heizung aus
					IF (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist > (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll * 1.5)) THEN
						g_i_status_HZ[l_i] := 0;
					ENDIF
					// Falls Ist-Temperaturwert wieder ungef�hr Soll-Temperaturwert Niveau erreicht hat -> Heizung ein
					IF (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_ist < (g_temp_TIRC[G_I_INDEX_HZ[l_i]].r_soll * 1.01)) THEN
						g_i_status_HZ[l_i] := 1;
					ENDIF
				ENDIF
			ENDLOOP
						
			//Ansteuerung der Signalampel (Gr�n = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			//Ausnutzung von FB_PFM.MinPause (Immer abwechselnd Pulse und MinPause)
			FB_PFM[0] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 3:		//Anlage: Betrieb - Labor
			IF l_i_status_PL <> g_i_status_PL THEN					//Einmalige Aktion beim Anfahren
				g_i_period_GAL := 0;			//und periodisch gemessen aus
				LOOP l_i = 1 TO 9 DO			//Heizungen EIN
					g_i_status_HZ[l_i] := 2;	
				ENDLOOP
				g_i_status_GR := 2;				//Gasregelung EIN - Feldtest
				g_i_status_CON := 2;			//Kondensatork�hlung erstmal auf manuell
				g_pv_PV1.i_ao := INT(G_R_ANALOG_SIGNAL*4/20); 	//Proportionalventil zu Kondensator 1 (K�hlwasser) erstmal geschlossen
				g_i_status_WS := 2;				//F�llstandsregelung im Vorlagebeh�lter EIN
				g_b_FG1 := TRUE;				//Freigabe-Relais aktivieren
				g_b_FG2 := TRUE;				//Freigabe-Relais aktivieren
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			//Automatikbetrieb AUS
			g_b_auto = FALSE;
			
			//Ansteuerung der Signalampel (Gr�n)
			g_b_SA1[0] := TRUE;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 4:		//Anlage: Betrieb - Feldtest
			//Von au�en kann die Last und damit der Sollbiogasvolumenstrom vorgegeben werden
			IF l_i_status_PL <> g_i_status_PL THEN					//Einmalige Aktion beim Anfahren
				LOOP l_i = 1 TO 9 DO			//Heizungen EIN
					g_i_status_HZ[l_i] := 2;	
				ENDLOOP
				g_i_status_GR := 2;				//Gasregelung EIN - Feldtest
				g_i_status_CON := 2;			//Kondensatork�hlung EIN
				g_i_status_SG := 2;				//Dampferzeugerregelung EIN
				g_i_status_WS := 2;				//F�llstandsregelung im Vorlagebeh�lter EIN
				g_b_FG1 := TRUE;				//Freigabe-Relais aktivieren
				g_b_FG2 := TRUE;				//Freigabe-Relais aktivieren
				g_b_GSM1_active := TRUE;		//GSM-Modul aktivieren
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 4;
				// g_r_last_ramp_extern := 23.2; //Anpassung f�r autonomen Betrieb
			ENDIF
								
			//Ansteuerung der Signalampel (Gr�n)
			g_b_SA1[0] := TRUE;	
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 5:		//Anlage: Abfahren - Labor
			IF l_i_status_PL <> g_i_status_PL THEN					//Einmalige Aktion beim Anfahren
				g_i_status_GAL := 2;			//Gasmessung auf 1.Stufe und 
				g_i_period_GAL := 1;			//und periodisch gemessen
				LOOP l_i = 2 TO 5 DO			//Heizungen AUS (au�er Produktgasabfuhr und Wasserdampfzugabe)
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				LOOP l_i = 7 TO 10 DO			
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				LOOP l_i = 1 TO 2 DO			//Druckregelung noch EIN
					g_i_status_PIRC[l_i] := 1;	
				ENDLOOP
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			//Automatikbetrieb AUS
			g_b_auto = FALSE;
			
			//Ansteuerung der Signalampel (Gr�n = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 20;			//Beim Abfahren sind Pausenzeiten erh�ht
			FB_PFM[0] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 6:		//Anlage: Abfahren - Feldtest
			IF l_i_status_PL <> g_i_status_PL THEN					//Einmalige Aktion beim Anfahren
				g_i_status_GAL := 0;			//Gasmessung AUS
				g_i_period_GAL := 0;			//und periodisch gemessen AUS
				LOOP l_i = 1 TO 5 DO			//Heizungen AUS
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				g_i_status_HZ[6] := 2;			// Biogaszuleitung: Heizung bleibt noch an, um beim Wiederanfahren aus dem Abfahrstatus die Tropfenbildung dort zu Vermeiden
				g_temp_TIRC[16].r_soll := 80;	
				LOOP l_i = 7 TO 9 DO			//Heizungen AUS
					g_i_status_HZ[l_i] := 0;	
				ENDLOOP
				g_i_status_GR := 3;				//Gasregelung H2-Sp�lung
				g_i_status_PIRC[2] := 2;		//Kontrolliertes �ffnen des Prozessgasventils
				g_i_status_CON := 0;			//Kondensatork�hlung AUS
				g_i_status_SG := 0;				//Dampferzeugerregelung AUS
				g_i_status_WS := 0;				//F�llstandsregelung im Vorlagebeh�lter AUS
				g_b_FG1 := TRUE;				//Freigabe-Relais aktivieren
				g_b_FG2 := TRUE;				//Freigabe-Relais aktivieren
				g_b_GSM1_active := TRUE;		//GSM-Modul aktivieren
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 2;
			ENDIF
			
			IF g_r_T_cat_max[2] < 310 THEN
				g_i_status_GR := 0;				//Gasregelung AUS
			ENDIF
			
			IF g_r_T_cat_max[2] < 175 THEN
				g_i_status_PL := 0;				//Anlage Stillstand
			ENDIF
						
			//Ansteuerung der Signalampel (Gr�n = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 20;			//Beim Abfahren sind Pausenzeiten erh�ht
			FB_PFM[0] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[0] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 7:		//Anlage: Fehler
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
				
				//Freigabe-Relais deaktivieren
				g_b_FG1 := FALSE;
				g_b_FG2 := FALSE;
			ENDIF
			
			//Fehlermeldung �ber GSM-Modul
			IF g_b_GSM1_active THEN
				g_b_GSM1_IN5 := TRUE;	
			ENDIF
			
			//Automatikbetrieb AUS
			g_b_auto = FALSE;
			
			//Ansteuerung der Signalampel (Rot)
			g_b_SA1[0] := FALSE;
			g_b_SA1[2] := TRUE;
			
			//Ausl�sen der Hupe f�r 5 Sekunden
			FB_TP_10ms[0].IN = g_b_e_add;
			FB_TP_10ms[0].PT = 500;
			FB_TP_10ms[0] FUB TP_10ms()
			g_b_SA1[4] := FB_TP_10ms[0].Q;	
		ENDACTION
		
		ACTION 8:		//Anlage: Manuelle Bedienung ohne Startbedingungen
			IF l_i_status_PL <> g_i_status_PL THEN
				l_i_status_PL := g_i_status_PL;
			ENDIF
			
			//Ansteuerung der Signalampel (Gelb = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			
			FB_PFM[0] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[1] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ACTION 9:		//Anlage: Standby -> Reaktoren werden auf Temperaturgehalten
			IF l_i_status_PL <> g_i_status_PL THEN
				g_i_status_GAL := 0;			//Gasmessung AUS
				g_i_period_GAL := 0;			//und periodisch gemessen AUS
				LOOP l_i = 1 TO 2 DO			//Druckregelung AUS
					g_i_status_PIRC[l_i] := 0;
					g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
				ENDLOOP
				IF (l_i_status_PL = 2) OR (l_i_status_PL = 4) OR (l_i_status_PL = 6) THEN		//Falls zuvor im Feldtest
					g_i_status_GR := 3;				//Gasregelung H2-Sp�lung
					l_b_GR_H2 := TRUE;						
				ELSE
					g_i_status_GR := 0;				//Gasregelung AUS
					l_b_GR_H2 := FALSE;		
				ENDIF
				
				g_i_status_CON := 0;			//Kondensatork�hlung AUS
				g_i_status_SG := 0;				//Dampferzeugerregelung AUS
				g_i_status_WS := 0;				//F�llstandsregelung im Vorlagebeh�lter AUS
			
				//Freigabe-Relais aktivieren
				g_b_FG1 := TRUE;
				g_b_FG2 := TRUE;
				
				//Nur HP-Reaktorheizung und Biogasheizung aktivieren
				LOOP l_i = 1 TO 9 DO			
					g_i_status_HZ[l_i] := 0;
				ENDLOOP
				g_i_status_HZ[8] := 2;			// HP-Reaktor EIN
				g_temp_TIRC[4].r_soll := 220; 	// HP-ReaktorHeizungstemperatur im Standby
				g_i_status_HZ[6] := 2;			// Biogaszuleitung EIN, um beim Wiederanfahren aus dem Standby die Tropfenbildung dort zu Vermeiden
				g_temp_TIRC[16].r_soll := 70;
				l_i_status_PL := g_i_status_PL;
				g_i_status_PL_extern_auto := 1;
			ENDIF
			
			FB_TP_10ms[1].IN = l_b_GR_H2;
			FB_TP_10ms[1].PT = 30000;
			FB_TP_10ms[1] FUB TP_10ms()
			IF FB_TP_10ms[1].Q = FALSE THEN
				g_i_status_GR := 0;				//Gasregelung AUS
				l_b_GR_H2 := FALSE;
			ENDIF
			
			//Ansteuerung der Signalampel (Gelb = blinkend)
			FB_PFM[0].Enable := TRUE;
			FB_PFM[0].DutyCycle := 99;			
			FB_PFM[0] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
			g_b_SA1[1] := FB_PFM[0].Out;
			g_b_SA1[2] := FALSE;
		ENDACTION
		
		ELSEACTION:	//Fehler: Kein definierter Status
			g_b_error[42] := TRUE;
			//System ausschalten:
			g_i_status_GAL := 0;
			LOOP l_i = 1 TO 10 DO
				g_i_status_HZ[l_i] := 0;
			ENDLOOP
			LOOP l_i = 1 TO 2 DO
				g_i_status_PIRC[l_i] := 0;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
			ENDLOOP
			g_i_status_GR := 0;
			g_i_status_SG := 0;
			g_i_status_CON := 0;
			g_i_status_WS := 0;
			g_b_auto = FALSE;
		ENDACTION
	ENDCASE	
	
	//Bei Warnung: Signalampel auf Orange und Ausl�sen der Hupe f�r 2.5 Sekunden bei Warnung
	IF g_i_w_sum > 0 THEN
		IF g_b_GSM1_active THEN
			g_b_GSM1_IN4 := TRUE;	//Warnmeldung �ber GSM-Modul
		ENDIF
		g_b_SA1[1] := TRUE;
	ENDIF
	FB_TP_10ms[0].IN = g_b_w_add;
	FB_TP_10ms[0].PT = 250;
	FB_TP_10ms[0] FUB TP_10ms()
	g_b_SA1[4] := FB_TP_10ms[0].Q;	
	
	//Anlagenzustand in Visualisierung (ContentStatusPage)
	g_b_status_PL[g_i_status_PL] := TRUE;
	LOOP l_i = 0 TO 9 DO			//Alle anderen = FALSE
		IF l_i <> g_i_status_PL THEN
			g_b_status_PL[l_i] := FALSE;
		ENDIF
	ENDLOOP
	
	//Zur Visualisierung des Anlagenzustands im ContentLeft und im ContentStatus (Siehe EventBinding) 
	IF g_i_w_sum > 0 THEN
		IF g_i_e_sum > 0 THEN
			g_i_status_PL_mV := 7;
		ELSE
			g_i_status_PL_mV := 9;
		ENDIF
	ELSE
		g_i_status_PL_mV := g_i_status_PL;
	ENDIF
	
	//Zur steuerungsseitigen Erkennung der Datenaufzeichnung: 
	(*Jede Minute wird g_b_data_active auf FALSE gesetzt, 
	kann nur von Seiten der Datenaufzeichnung auf TRUE gesetzt werden*)
	FB_PFM[1].Enable := TRUE;
	FB_PFM[1].DutyCycle := 99;			
	FB_PFM[1] FUB MTBasicsPFM();						//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation
	IF FB_PFM[1].Out THEN
		g_b_data_active := FALSE;
	ENDIF
	g_b_SA1[3] := g_b_data_active;						//Datenaufzeichnung �ber Signalampel signalisieren

	//Bei Automatikbetrieb im0 Feldtest - M�glichkeit zum externen Wechsel des Anlagenzustands
	IF g_b_auto = TRUE THEN
		IF g_i_status_PL_extern = 2 THEN	//Anfahren
			IF g_i_status_PL = 4 THEN
				g_i_status_PL := 4;
			ELSE
				g_i_status_PL := 2;
			ENDIF
		ENDIF
		IF g_i_status_PL_extern = 6 THEN	//Abfahren
			IF g_i_status_PL = 0 THEN
				g_i_status_PL := 0;
			ELSE
				g_i_status_PL := 6;
			ENDIF
		ENDIF
		IF g_i_status_PL_extern = 9 THEN	//Standby
			g_i_status_PL := 9;
		ENDIF
		IF g_i_status_PL = 4 THEN
			IF g_i_status_PL_extern = 10 THEN	//Standby
				// g_r_last_ramp_extern := 8.2; // Anpassung bei autonomen Betrieb
				// g_r_last_ramp_extern := 23.2;
				g_i_status_PL_extern_auto := 4;
			ENDIF	
			IF g_i_status_PL_extern = 11 THEN	//Standby
				// g_r_last_ramp_extern := 23.2;
				// g_r_last_ramp_extern := 56.7; // Anpassung bei autonmen Betrieb
				g_i_status_PL_extern_auto := 5;
			ENDIF
		ENDIF
					
		//Zeitschritterfassung im autonomen Betrieb
		FB_PFM[2].Enable := TRUE;
		FB_PFM[2].DutyCycle := 99;				//Ausnutzung von FB_PFM.MinPause = 1s (Immer abwechselnd Pulse und MinPause)
		FB_PFM[2] FUB MTBasicsPFM();			//Funktionsaufruf MTBasicsPFM Pulsfrequenzmodulation	
		IF EDGEPOS(FB_PFM[2].Out) THEN		//Bei positiver Flanke Erh�hung des Zeitschritts um 1
			g_i_time_step_extern_auto := g_i_time_step_extern_auto + 1;
		ENDIF	
	ELSE
		FB_PFM[2].Enable := FALSE;
		g_i_time_step_extern_auto := 0;
	ENDIF
	

END_PROGRAM

PROGRAM _EXIT

END_PROGRAM

