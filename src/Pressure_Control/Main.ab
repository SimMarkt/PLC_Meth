(********************************************************************
 * Program: Pressure_Control
 * Author: Markthaler
 * Created: 30.03.2022
 * Info: Pressure control for the steam side (l_i=1) and the process gas side (l_i=2)
 ********************************************************************)


PROGRAM _INIT
	//Initialization of the PID control parameters and ramp parameters (individually for each pressure control)
	l_i:=1; //Steam
	l_r_pid_var[l_i,0] := 100;
	l_r_pid_var[l_i,1] := 14.4;
	l_r_pid_var[l_i,2] := 1;
	l_r_pid_var[l_i,3] := 0.346;
	l_r_ramp_var[l_i,0] := 0.05;
	l_r_ramp_var[l_i,1] := 0.03;
	l_r_ramp_var[l_i,2] := 0.0;
	l_r_ramp_var[l_i,3] := 10.0;
	l_i:=2; //Process gas
	l_r_pid_var[l_i,0] := 140.09;
	l_r_pid_var[l_i,1] := 14.4;
	l_r_pid_var[l_i,2] := 3.46;
	l_r_pid_var[l_i,3] := 0.346;
	l_r_ramp_var[l_i,0] := 0.05;
	l_r_ramp_var[l_i,1] := 0.03;
	l_r_ramp_var[l_i,2] := 0.0;
	l_r_ramp_var[l_i,3] := 10.0;
	l_i:=3; //Steam: Controlled valve opening
	l_r_ramp_var[l_i,0] := 15;	//Opening the valves from 0% -> 100% opening degree in 6.6s
	l_r_ramp_var[l_i,1] := 15;
	l_r_ramp_var[l_i,2] := 0.0;
	l_r_ramp_var[l_i,3] := 100.0;
	l_i:=4; //Process gas: Controlled valve opening
	l_r_ramp_var[l_i,0] := 15;	//Opening the valves from 0% -> 100% opening degree in 6.6s
	l_r_ramp_var[l_i,1] := 15;
	l_r_ramp_var[l_i,2] := 0.0;
	l_r_ramp_var[l_i,3] := 100.0;

	LOOP l_i = 1 TO 2 DO	
		//Initial values for the limits of the valve position opening degree
		g_rv_RV[l_i].r_open_min := 0;  		// corresponds to valve 0% open
		g_rv_RV[l_i].r_open_max := 100;		// corresponds to valve 100% open
		
		l_r_pid_var[l_i,4] := g_rv_RV[l_i].r_open_min;			//Adjusted to valve position [MinOut = 0 -> valve 0% open]
		l_r_pid_var[l_i,5] := g_rv_RV[l_i].r_open_max;			//Adjusted to valve position [MaxOut = 100 -> valve 100% open]
		
		//Transfer of the PID control parameters to the PID function block
		FB_PID[l_i].PIDParameters.Gain := l_r_pid_var[l_i,0];
		FB_PID[l_i].PIDParameters.IntegrationTime := l_r_pid_var[l_i,1];
		FB_PID[l_i].PIDParameters.DerivativeTime := l_r_pid_var[l_i,2];
		FB_PID[l_i].PIDParameters.FilterTime := l_r_pid_var[l_i,3];
		FB_PID[l_i].MinOut:= l_r_pid_var[l_i,4]; 	
		FB_PID[l_i].MaxOut:= l_r_pid_var[l_i,5];
		
		//Initialization of the limits for PID output values during tuning
		FB_OscillationTuning[l_i].MinOut:= l_r_pid_var[l_i,4];	
		FB_OscillationTuning[l_i].MaxOut:= l_r_pid_var[l_i,5];
		
		//Initialization of ramp parameters
		FB_Limiter[l_i].MaxPosSlewRate := l_r_ramp_var[l_i,0];
		FB_Limiter[l_i].MaxNegSlewRate := l_r_ramp_var[l_i,1];
		FB_Limiter[l_i].MinOut := l_r_ramp_var[l_i,2];
		FB_Limiter[l_i].MaxOut := l_r_ramp_var[l_i,3];						
	 
		//Initial status: OFF
		g_i_status_PIRC[l_i] := 0;
	ENDLOOP
	
	LOOP l_i = 3 TO 4 DO
		//Initialization of ramp parameters for controlled valve opening
		FB_Limiter[l_i].MaxPosSlewRate := l_r_ramp_var[l_i,0];
		FB_Limiter[l_i].MaxNegSlewRate := l_r_ramp_var[l_i,1];
		FB_Limiter[l_i].MinOut := l_r_ramp_var[l_i,2];
		FB_Limiter[l_i].MaxOut := l_r_ramp_var[l_i,3];	
	ENDLOOP
	L_R_test := 0;
END_PROGRAM



PROGRAM _CYCLIC	
	LOOP l_i = 1 TO 2 DO
		CASE g_i_status_PIRC[l_i] OF
			ACTION 0:	//Pressure control OFF
				FB_PID[l_i].Enable := FALSE;
				FB_OscillationTuning[l_i].Enable := FALSE;
				g_b_ramp_active[l_i] := FALSE;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL);
			ENDACTION
			
			ACTION 1:	//Pressure control ON
				//Manual adjustment of the minimum and maximum valve position (Visualization)
				IF EDGEPOS(g_rv_RV[l_i].b_update) THEN
					l_r_pid_var[l_i,4] := g_rv_RV[l_i].r_open_min;			//Adjusted to valve position [MinOut = 0 -> valve 0% open]
					l_r_pid_var[l_i,5] := g_rv_RV[l_i].r_open_max;			//Adjusted to valve position [MaxOut = 100 -> valve 100% open]
					FB_PID[l_i].MaxOut:= 100 - l_r_pid_var[l_i,4]; 	
					FB_PID[l_i].MinOut:= 100 - l_r_pid_var[l_i,5];
					FB_PID[l_i].Update := TRUE;
				ELSE
					IF EDGEPOS(FB_PID[l_i].UpdateDone) THEN
						FB_PID[l_i].Update := FALSE;
						g_rv_RV[l_i].b_update := FALSE;
					ENDIF
				ENDIF
				
				//Manual adjustment of the pressure level via ramp (Visualization)
				IF EDGEPOS(g_b_ramp_active[l_i]) THEN
					FB_Limiter[l_i].OutPresetValue := g_pres_PIRC[l_i].r_ist;   		//Start at current pressure value
					FB_Limiter[l_i].SetOut := TRUE;
					IF g_r_ramp_time[l_i] <> 0 THEN										//Division by zero leads to internal error
						FB_Limiter[l_i].MaxPosSlewRate := ABS(g_pres_PIRC[l_i].r_soll - g_pres_PIRC[l_i].r_ist) / (g_r_ramp_time[l_i] * 60);	//Calculate slope 
						FB_Limiter[l_i].MaxNegSlewRate := ABS(g_pres_PIRC[l_i].r_soll - g_pres_PIRC[l_i].r_ist) / (g_r_ramp_time[l_i] * 60);							
					ELSE
						FB_Limiter[l_i].MaxPosSlewRate := 2;	//Calculate slope 
						FB_Limiter[l_i].MaxNegSlewRate := 2;							
					ENDIF
					FB_Limiter[l_i].Update := TRUE;
				ELSE
					IF EDGEPOS(FB_Limiter[l_i].UpdateDone) THEN
						FB_Limiter[l_i].Update := FALSE;
					ENDIF
				ENDIF
				
				//Start ramp
				IF g_b_ramp_active[l_i] = TRUE THEN
					FB_Limiter[l_i].Enable := TRUE;
					FB_Limiter[l_i].In := g_pres_PIRC[l_i].r_soll;
					FB_Limiter[l_i] FUB MTBasicsLimiter();
					g_r_p_soll_PIRC[l_i] := FB_Limiter[l_i].Out;
				ELSE
					FB_Limiter[l_i].Enable := FALSE;
				ENDIF					
				
				//As soon as the target value of the ramp is reached, end ramp
				IF g_pres_PIRC[l_i].r_soll = g_r_p_soll_PIRC[l_i] THEN
					g_b_ramp_active[l_i] := FALSE;
				ENDIF
				
				//Execute PID control
				FB_PID[l_i].Enable := TRUE;													//Activate controller
				FB_PID[l_i].SetValue := g_r_p_soll_PIRC[l_i]; 								//Setpoint
				FB_PID[l_i].ActValue := g_pres_PIRC[l_i].r_ist;								//Read actual value
				FB_PID[l_i] FUB MTBasicsPID();												//Function call MTBasicsPID 
				// If g_r_p_soll_PIRC[l_i] > g_pres_PIRC[l_i].r_ist -> FB_PID[l_i].Out = 100 (Valve closed)
				// If g_r_p_soll_PIRC[l_i] < g_pres_PIRC[l_i].r_ist -> FB_PID[l_i].Out = 0	(Valve open)
				l_r_pid_out[l_i] := g_rv_RV[l_i].r_open_max - FB_PID[l_i].Out; 					//FB_PID[l_i].Out with negative feedback from control and regulated variable
							
				//Transfer of the PID output values to the valve position (Closed -> Open: i_ao = 6554 -> 32767 / l_r_pid_out = 0 -> 100)
				IF l_i = 1 THEN			//Distinction: i_ao for steam at higher 4mA signal
					g_rv_RV[l_i].i_ao := INT((l_r_pid_out[l_i] * (G_R_ANALOG_SIGNAL - G_R_ANALOG_SIGNAL_4mA[6]) / (g_rv_RV[l_i].r_open_max-g_rv_RV[l_i].r_open_min)) + G_R_ANALOG_SIGNAL_4mA[6]);
				ELSE
					g_rv_RV[l_i].i_ao := INT((l_r_pid_out[l_i] * (G_R_ANALOG_SIGNAL*16/20) / (g_rv_RV[l_i].r_open_max-g_rv_RV[l_i].r_open_min)) + G_R_ANALOG_SIGNAL*4/20);
				ENDIF
				IF g_rv_RV[l_i].i_ao >= INT(G_R_ANALOG_SIGNAL) THEN			//Safety for rounding errors
					g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL);
				ELSE
					IF g_rv_RV[l_i].i_ao <= INT(G_R_ANALOG_SIGNAL*4/20) THEN
						g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
					ENDIF
				ENDIF
			ENDACTION
				
			ACTION 2: 	//Slow opening of the valves for controlled pressure relief
				FB_PID[l_i].Enable := FALSE;
				FB_OscillationTuning[l_i].Enable := FALSE;
				g_rv_RV[l_i].b_update := FALSE;
				g_pres_PIRC[l_i].r_soll := 0;				//Set pressure to zero
				g_r_p_soll_PIRC[l_i] := 0;
				g_b_ramp_active[l_i] := FALSE;
				//Controlled opening of the valve
				FB_Limiter[l_i+2].OutPresetValue := 40;
				FB_Limiter[l_i+2].SetOut := TRUE;
				FB_Limiter[l_i+2].Enable := TRUE;
				FB_Limiter[l_i+2].In := 100;
				FB_Limiter[l_i+2] FUB MTBasicsLimiter();
				//Transfer of the output values to the valve position
				g_rv_RV[l_i].i_ao := INT((FB_Limiter[l_i+2].Out * (G_R_ANALOG_SIGNAL*16/20) / (g_rv_RV[l_i].r_open_max-g_rv_RV[l_i].r_open_min)) + G_R_ANALOG_SIGNAL*4/20);
				IF g_rv_RV[l_i].i_ao >= INT(G_R_ANALOG_SIGNAL) THEN			//Safety for rounding errors
					g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL);
				ELSE
					IF g_rv_RV[l_i].i_ao <= INT(G_R_ANALOG_SIGNAL*4/20) THEN
						g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
					ENDIF
				ENDIF
			ENDACTION
    
			ELSEACTION:	//Error: No defined status
				g_b_error[l_i+54] := TRUE;
				g_rv_RV[l_i].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);	//Process control valves open
			ENDACTION
		ENDCASE
	ENDLOOP	 
END_PROGRAM

PROGRAM _EXIT
	(* Insert code here *)
	 
END_PROGRAM