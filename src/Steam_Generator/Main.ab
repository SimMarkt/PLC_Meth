(********************************************************************
 * Program: Steam_Generator
 * Author: Markthaler
 * Created: 30.03.2022
 * Info: Control of the steam generator
	(Note: MTBasicsPFM was not used because if Dutycycle << 5% -> OffTime (t_OFF) is very large. When switching to 
	Dutycycle = 100%, the function block then waits for t_OFF -> No power for a long time, although it would be necessary according to the PID.
	With LCRPFM, a regular check of the input value takes place, so that t_OFF is corrected, but here
	for x = 100%, the signal is not continuously set to TRUE. For this reason -> If x > 98 -> TRUE)
 ********************************************************************)

PROGRAM _INIT
	//Initialization of the PID control parameters
	l_r_pid_var[0] := 0.002;
	l_r_pid_var[1] := 300;
	l_r_pid_var[2] := 0;
	l_r_pid_var[3] := 0;
	l_r_pid_var[4] := 0;
	l_r_pid_var[5] := 0.72;
	g_r_pid_var_DE[0] := l_r_pid_var[0];
	g_r_pid_var_DE[1] := l_r_pid_var[1];
	g_r_pid_var_DE[2] := l_r_pid_var[2];
	g_r_pid_var_DE[3] := l_r_pid_var[3];
	
	//Transfer of the PID control parameters to the PID function block
	FB_PID.PIDParameters.Gain := l_r_pid_var[0];
	FB_PID.PIDParameters.IntegrationTime := l_r_pid_var[1];
	FB_PID.PIDParameters.DerivativeTime := l_r_pid_var[2];
	FB_PID.PIDParameters.FilterTime := l_r_pid_var[3];
	FB_PID.MinOut := l_r_pid_var[4];
	FB_PID.MaxOut := l_r_pid_var[5];
	
	//Initial status: OFF
	g_i_status_SG := 0;
END_PROGRAM

PROGRAM _CYCLIC
	//Control: Level in the steam generator
	CASE g_i_status_SG OF
		ACTION 0:		//Steam generator control OFF
			g_pm_PM[1].r_soll := 0;				//Output signal to diaphragm pump to zero
			g_r_m_steam := g_pm_PM[1].r_soll * 2.363636				//Steam mass flow [Factor takes into account steam production in condenser 1]
			g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL_4mA[0]);
		ENDACTION
		
		ACTION 1:		//Manual pump control
			g_r_m_steam := g_pm_PM[1].r_soll * 2.363636				//Steam mass flow [Factor takes into account steam production in condenser 1]
			g_pm_PM[1].i_ao := INT((g_pm_PM[1].r_soll * (G_R_ANALOG_SIGNAL-G_R_ANALOG_SIGNAL_4mA[0]) / (g_pm_PM[1].r_max-g_pm_PM[1].r_min)) + G_R_ANALOG_SIGNAL_4mA[0]);
			IF g_pm_PM[1].i_ao >= INT(G_R_ANALOG_SIGNAL) THEN		//Safety for rounding errors
				g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL);
			ELSE
				IF g_pm_PM[1].i_ao <= INT(G_R_ANALOG_SIGNAL_4mA[0]) THEN
					g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL_4mA[0]);
				ENDIF
			ENDIF
		ENDACTION
		
		ACTION 2:		//Steam generator control ON
			//Execute PID control
			FB_PID.Enable := TRUE;									//Activate controller
			FB_PID.SetValue := g_r_T_cat_max_soll[0]; 				//Setpoint, calculation in the program "Condenser control"
			FB_PID.ActValue := g_r_T_cat_max[2];					//Read actual value
			
			//Manual adjustment of control parameters
			IF EDGEPOS(g_pm_PM[1].b_update) THEN
				l_r_pid_var[0] := g_r_pid_var_DE[0];
				l_r_pid_var[1] := g_r_pid_var_DE[1];
				l_r_pid_var[2] := g_r_pid_var_DE[2];
				l_r_pid_var[3] := g_r_pid_var_DE[3];
				FB_PID.PIDParameters.Gain := l_r_pid_var[0];
				FB_PID.PIDParameters.IntegrationTime := l_r_pid_var[1];
				FB_PID.PIDParameters.DerivativeTime := l_r_pid_var[2];
				FB_PID.PIDParameters.FilterTime := l_r_pid_var[3];
				FB_PID.Update := TRUE;
			ELSE
				IF EDGEPOS(FB_PID.UpdateDone) THEN
					FB_PID.Update := FALSE;
					g_pm_PM[1].b_update := FALSE;
				ENDIF
			ENDIF
			
			FB_PID FUB MTBasicsPID(); 								//Function call MTBasicsPID
		
			//Transfer of the PID output values to the diaphragm pump
			g_pm_PM[1].r_soll := (l_r_pid_var[5] - FB_PID.Out) * g_r_DE_adapt; 	//PID output -> input value
			g_r_m_steam := g_pm_PM[1].r_soll * 2.363636				//Steam mass flow [Factor takes into account steam production in condenser 1]
			g_pm_PM[1].i_ao := INT((g_pm_PM[1].r_soll * (G_R_ANALOG_SIGNAL-G_R_ANALOG_SIGNAL_4mA[0]) / (g_pm_PM[1].r_max-g_pm_PM[1].r_min)) + G_R_ANALOG_SIGNAL_4mA[0]);
			IF g_pm_PM[1].i_ao >= INT(G_R_ANALOG_SIGNAL) THEN		//Safety for rounding errors
				g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL);
			ELSE
				IF g_pm_PM[1].i_ao <= INT(G_R_ANALOG_SIGNAL_4mA[0]) THEN
					g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL_4mA[0]);
				ENDIF
			ENDIF 
		ENDACTION
		
		ELSEACTION:	//Error: No defined status
			g_b_error[58] := TRUE;
			g_pm_PM[1].r_soll := 0;				//Output signal to diaphragm pump to zero
			g_r_m_steam := g_pm_PM[1].r_soll * 2.363636				//Steam mass flow [Factor takes into account steam production in condenser 1]
			g_pm_PM[1].i_ao := INT(G_R_ANALOG_SIGNAL*4/20);
		ENDACTION
	ENDCASE	
END_PROGRAM

PROGRAM _EXIT
	(* Insert code here *)
	
END_PROGRAM

